/*
aiproductdataenhancer/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiproductdataenhancer

import (
	"encoding/json"
	"fmt"
)

// AiproductdataenhancerToneType the model 'AiproductdataenhancerToneType'
type AiproductdataenhancerToneType string

// List of aiproductdataenhancerToneType
const (
	AIPRODUCTDATAENHANCERTONETYPE_UNKNOWN        AiproductdataenhancerToneType = "TONE_TYPE_UNKNOWN"
	AIPRODUCTDATAENHANCERTONETYPE_FORMAL         AiproductdataenhancerToneType = "TONE_TYPE_FORMAL"
	AIPRODUCTDATAENHANCERTONETYPE_CASUAL         AiproductdataenhancerToneType = "TONE_TYPE_CASUAL"
	AIPRODUCTDATAENHANCERTONETYPE_PERSUASIVE     AiproductdataenhancerToneType = "TONE_TYPE_PERSUASIVE"
	AIPRODUCTDATAENHANCERTONETYPE_INFORMATIVE    AiproductdataenhancerToneType = "TONE_TYPE_INFORMATIVE"
	AIPRODUCTDATAENHANCERTONETYPE_INSPIRATIONAL  AiproductdataenhancerToneType = "TONE_TYPE_INSPIRATIONAL"
	AIPRODUCTDATAENHANCERTONETYPE_AUTHORITATIVE  AiproductdataenhancerToneType = "TONE_TYPE_AUTHORITATIVE"
	AIPRODUCTDATAENHANCERTONETYPE_PLAYFUL        AiproductdataenhancerToneType = "TONE_TYPE_PLAYFUL"
	AIPRODUCTDATAENHANCERTONETYPE_EMPATHETIC     AiproductdataenhancerToneType = "TONE_TYPE_EMPATHETIC"
	AIPRODUCTDATAENHANCERTONETYPE_SALES_ORIENTED AiproductdataenhancerToneType = "TONE_TYPE_SALES_ORIENTED"
	AIPRODUCTDATAENHANCERTONETYPE_TECHNICAL      AiproductdataenhancerToneType = "TONE_TYPE_TECHNICAL"
	AIPRODUCTDATAENHANCERTONETYPE_SOPHISTICATED  AiproductdataenhancerToneType = "TONE_TYPE_SOPHISTICATED"
	AIPRODUCTDATAENHANCERTONETYPE_URGENT         AiproductdataenhancerToneType = "TONE_TYPE_URGENT"
	AIPRODUCTDATAENHANCERTONETYPE_FRIENDLY       AiproductdataenhancerToneType = "TONE_TYPE_FRIENDLY"
	AIPRODUCTDATAENHANCERTONETYPE_PROFESSIONAL   AiproductdataenhancerToneType = "TONE_TYPE_PROFESSIONAL"
	AIPRODUCTDATAENHANCERTONETYPE_HUMOROUS       AiproductdataenhancerToneType = "TONE_TYPE_HUMOROUS"
)

// All allowed values of AiproductdataenhancerToneType enum
var AllowedAiproductdataenhancerToneTypeEnumValues = []AiproductdataenhancerToneType{
	"TONE_TYPE_UNKNOWN",
	"TONE_TYPE_FORMAL",
	"TONE_TYPE_CASUAL",
	"TONE_TYPE_PERSUASIVE",
	"TONE_TYPE_INFORMATIVE",
	"TONE_TYPE_INSPIRATIONAL",
	"TONE_TYPE_AUTHORITATIVE",
	"TONE_TYPE_PLAYFUL",
	"TONE_TYPE_EMPATHETIC",
	"TONE_TYPE_SALES_ORIENTED",
	"TONE_TYPE_TECHNICAL",
	"TONE_TYPE_SOPHISTICATED",
	"TONE_TYPE_URGENT",
	"TONE_TYPE_FRIENDLY",
	"TONE_TYPE_PROFESSIONAL",
	"TONE_TYPE_HUMOROUS",
}

func (v *AiproductdataenhancerToneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AiproductdataenhancerToneType(value)
	for _, existing := range AllowedAiproductdataenhancerToneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AiproductdataenhancerToneType", value)
}

// NewAiproductdataenhancerToneTypeFromValue returns a pointer to a valid AiproductdataenhancerToneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAiproductdataenhancerToneTypeFromValue(v string) (*AiproductdataenhancerToneType, error) {
	ev := AiproductdataenhancerToneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AiproductdataenhancerToneType: valid values are %v", v, AllowedAiproductdataenhancerToneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AiproductdataenhancerToneType) IsValid() bool {
	for _, existing := range AllowedAiproductdataenhancerToneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aiproductdataenhancerToneType value
func (v AiproductdataenhancerToneType) Ptr() *AiproductdataenhancerToneType {
	return &v
}

type NullableAiproductdataenhancerToneType struct {
	value *AiproductdataenhancerToneType
	isSet bool
}

func (v NullableAiproductdataenhancerToneType) Get() *AiproductdataenhancerToneType {
	return v.value
}

func (v *NullableAiproductdataenhancerToneType) Set(val *AiproductdataenhancerToneType) {
	v.value = val
	v.isSet = true
}

func (v NullableAiproductdataenhancerToneType) IsSet() bool {
	return v.isSet
}

func (v *NullableAiproductdataenhancerToneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiproductdataenhancerToneType(val *AiproductdataenhancerToneType) *NullableAiproductdataenhancerToneType {
	return &NullableAiproductdataenhancerToneType{value: val, isSet: true}
}

func (v NullableAiproductdataenhancerToneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAiproductdataenhancerToneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
