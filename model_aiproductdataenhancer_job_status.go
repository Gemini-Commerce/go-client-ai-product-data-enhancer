/*
aiproductdataenhancer/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiproductdataenhancer

import (
	"encoding/json"
	"fmt"
)

// AiproductdataenhancerJobStatus the model 'AiproductdataenhancerJobStatus'
type AiproductdataenhancerJobStatus string

// List of aiproductdataenhancerJobStatus
const (
	AIPRODUCTDATAENHANCERJOBSTATUS_UNKNOWN AiproductdataenhancerJobStatus = "JOB_STATUS_UNKNOWN"
	AIPRODUCTDATAENHANCERJOBSTATUS_PENDING AiproductdataenhancerJobStatus = "JOB_STATUS_PENDING"
	AIPRODUCTDATAENHANCERJOBSTATUS_RUNNING AiproductdataenhancerJobStatus = "JOB_STATUS_RUNNING"
	AIPRODUCTDATAENHANCERJOBSTATUS_COMPLETED AiproductdataenhancerJobStatus = "JOB_STATUS_COMPLETED"
	AIPRODUCTDATAENHANCERJOBSTATUS_FAILED AiproductdataenhancerJobStatus = "JOB_STATUS_FAILED"
)

// All allowed values of AiproductdataenhancerJobStatus enum
var AllowedAiproductdataenhancerJobStatusEnumValues = []AiproductdataenhancerJobStatus{
	"JOB_STATUS_UNKNOWN",
	"JOB_STATUS_PENDING",
	"JOB_STATUS_RUNNING",
	"JOB_STATUS_COMPLETED",
	"JOB_STATUS_FAILED",
}

func (v *AiproductdataenhancerJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AiproductdataenhancerJobStatus(value)
	for _, existing := range AllowedAiproductdataenhancerJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AiproductdataenhancerJobStatus", value)
}

// NewAiproductdataenhancerJobStatusFromValue returns a pointer to a valid AiproductdataenhancerJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAiproductdataenhancerJobStatusFromValue(v string) (*AiproductdataenhancerJobStatus, error) {
	ev := AiproductdataenhancerJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AiproductdataenhancerJobStatus: valid values are %v", v, AllowedAiproductdataenhancerJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AiproductdataenhancerJobStatus) IsValid() bool {
	for _, existing := range AllowedAiproductdataenhancerJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aiproductdataenhancerJobStatus value
func (v AiproductdataenhancerJobStatus) Ptr() *AiproductdataenhancerJobStatus {
	return &v
}

type NullableAiproductdataenhancerJobStatus struct {
	value *AiproductdataenhancerJobStatus
	isSet bool
}

func (v NullableAiproductdataenhancerJobStatus) Get() *AiproductdataenhancerJobStatus {
	return v.value
}

func (v *NullableAiproductdataenhancerJobStatus) Set(val *AiproductdataenhancerJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAiproductdataenhancerJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAiproductdataenhancerJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiproductdataenhancerJobStatus(val *AiproductdataenhancerJobStatus) *NullableAiproductdataenhancerJobStatus {
	return &NullableAiproductdataenhancerJobStatus{value: val, isSet: true}
}

func (v NullableAiproductdataenhancerJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAiproductdataenhancerJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

