/*
aiproductdataenhancer/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiproductdataenhancer

import (
	"encoding/json"
)

// checks if the ProductInformationImageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInformationImageInfo{}

// ProductInformationImageInfo struct for ProductInformationImageInfo
type ProductInformationImageInfo struct {
	Url                  *string            `json:"url,omitempty"`
	Metadata             *map[string]string `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductInformationImageInfo ProductInformationImageInfo

// NewProductInformationImageInfo instantiates a new ProductInformationImageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInformationImageInfo() *ProductInformationImageInfo {
	this := ProductInformationImageInfo{}
	return &this
}

// NewProductInformationImageInfoWithDefaults instantiates a new ProductInformationImageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInformationImageInfoWithDefaults() *ProductInformationImageInfo {
	this := ProductInformationImageInfo{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ProductInformationImageInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationImageInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ProductInformationImageInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ProductInformationImageInfo) SetUrl(v string) {
	o.Url = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ProductInformationImageInfo) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInformationImageInfo) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProductInformationImageInfo) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *ProductInformationImageInfo) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o ProductInformationImageInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInformationImageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductInformationImageInfo) UnmarshalJSON(data []byte) (err error) {
	varProductInformationImageInfo := _ProductInformationImageInfo{}

	err = json.Unmarshal(data, &varProductInformationImageInfo)

	if err != nil {
		return err
	}

	*o = ProductInformationImageInfo(varProductInformationImageInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductInformationImageInfo struct {
	value *ProductInformationImageInfo
	isSet bool
}

func (v NullableProductInformationImageInfo) Get() *ProductInformationImageInfo {
	return v.value
}

func (v *NullableProductInformationImageInfo) Set(val *ProductInformationImageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInformationImageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInformationImageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInformationImageInfo(val *ProductInformationImageInfo) *NullableProductInformationImageInfo {
	return &NullableProductInformationImageInfo{value: val, isSet: true}
}

func (v NullableProductInformationImageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInformationImageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
