/*
aiproductdataenhancer/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiproductdataenhancer

import (
	"encoding/json"
)

// checks if the AiproductdataenhancerProductDataToFill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AiproductdataenhancerProductDataToFill{}

// AiproductdataenhancerProductDataToFill struct for AiproductdataenhancerProductDataToFill
type AiproductdataenhancerProductDataToFill struct {
	Name     *string  `json:"name,omitempty"`
	ValueSet []string `json:"valueSet,omitempty"`
	// Metadata is an optional field to provide additional information to the AI like, max length, min length, field description, etc.
	Metadata             *map[string]string `json:"metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AiproductdataenhancerProductDataToFill AiproductdataenhancerProductDataToFill

// NewAiproductdataenhancerProductDataToFill instantiates a new AiproductdataenhancerProductDataToFill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAiproductdataenhancerProductDataToFill() *AiproductdataenhancerProductDataToFill {
	this := AiproductdataenhancerProductDataToFill{}
	return &this
}

// NewAiproductdataenhancerProductDataToFillWithDefaults instantiates a new AiproductdataenhancerProductDataToFill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAiproductdataenhancerProductDataToFillWithDefaults() *AiproductdataenhancerProductDataToFill {
	this := AiproductdataenhancerProductDataToFill{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AiproductdataenhancerProductDataToFill) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiproductdataenhancerProductDataToFill) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AiproductdataenhancerProductDataToFill) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AiproductdataenhancerProductDataToFill) SetName(v string) {
	o.Name = &v
}

// GetValueSet returns the ValueSet field value if set, zero value otherwise.
func (o *AiproductdataenhancerProductDataToFill) GetValueSet() []string {
	if o == nil || IsNil(o.ValueSet) {
		var ret []string
		return ret
	}
	return o.ValueSet
}

// GetValueSetOk returns a tuple with the ValueSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiproductdataenhancerProductDataToFill) GetValueSetOk() ([]string, bool) {
	if o == nil || IsNil(o.ValueSet) {
		return nil, false
	}
	return o.ValueSet, true
}

// HasValueSet returns a boolean if a field has been set.
func (o *AiproductdataenhancerProductDataToFill) HasValueSet() bool {
	if o != nil && !IsNil(o.ValueSet) {
		return true
	}

	return false
}

// SetValueSet gets a reference to the given []string and assigns it to the ValueSet field.
func (o *AiproductdataenhancerProductDataToFill) SetValueSet(v []string) {
	o.ValueSet = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AiproductdataenhancerProductDataToFill) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AiproductdataenhancerProductDataToFill) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AiproductdataenhancerProductDataToFill) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *AiproductdataenhancerProductDataToFill) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o AiproductdataenhancerProductDataToFill) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AiproductdataenhancerProductDataToFill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ValueSet) {
		toSerialize["valueSet"] = o.ValueSet
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AiproductdataenhancerProductDataToFill) UnmarshalJSON(data []byte) (err error) {
	varAiproductdataenhancerProductDataToFill := _AiproductdataenhancerProductDataToFill{}

	err = json.Unmarshal(data, &varAiproductdataenhancerProductDataToFill)

	if err != nil {
		return err
	}

	*o = AiproductdataenhancerProductDataToFill(varAiproductdataenhancerProductDataToFill)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "valueSet")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *AiproductdataenhancerProductDataToFill) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *AiproductdataenhancerProductDataToFill) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableAiproductdataenhancerProductDataToFill struct {
	value *AiproductdataenhancerProductDataToFill
	isSet bool
}

func (v NullableAiproductdataenhancerProductDataToFill) Get() *AiproductdataenhancerProductDataToFill {
	return v.value
}

func (v *NullableAiproductdataenhancerProductDataToFill) Set(val *AiproductdataenhancerProductDataToFill) {
	v.value = val
	v.isSet = true
}

func (v NullableAiproductdataenhancerProductDataToFill) IsSet() bool {
	return v.isSet
}

func (v *NullableAiproductdataenhancerProductDataToFill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAiproductdataenhancerProductDataToFill(val *AiproductdataenhancerProductDataToFill) *NullableAiproductdataenhancerProductDataToFill {
	return &NullableAiproductdataenhancerProductDataToFill{value: val, isSet: true}
}

func (v NullableAiproductdataenhancerProductDataToFill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAiproductdataenhancerProductDataToFill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
